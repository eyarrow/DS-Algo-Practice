# Some algorithms that can use a Hashtable to optimize

from collections import deque

# Problem statement: Given a string of parentheses, determine if the string is valid. EX: "{[]}" is valid but "[}" is not
# Solution uses a stack to optimize
# O(n) time complexity where n is the length of the array. 
def valid_parentheses(s):
    mapping = {")": "(",
               "]": "[",
               "}": "{",
               }

    matches = deque()
    for character in s:
        if character not in mapping:
            matches.append(character)
        else:
            if len(matches) > 0:
                open_element = matches.pop()
                if open_element != mapping[character]:
                    return False
            else:
                return False
    if len(matches) == 0:
        return True
    else:
        return False
        
        
# Problem Statement: Determine if two strings are isomorphic. Ex: "all" and "egg" are isomorphic because a always maps to e and l always maps to g
# O(n) time complexity where n is the size of the strings
def is_isomorphic(str_1, str_2):
    mapped = {}
    used = set()

    for i in range(0, len(str_2)):
        if len(str_1) != len(str_2):
            return False
        a_char = str_1[i]
        b_char = str_2[i]
        if b_char in used:
            if a_char not in mapped:
                return False
        else:
            if a_char in mapped:
                if mapped[a_char] != b_char:
                   return False
        mapped[a_char] = b_char
        used.add(b_char)
    return True
