# Problems that utilize a Depth First Search Pattern

# Depth First traversal search algorithm
def dfs(root, target):
    if root is None:
        return None
    if root.val == target:
        return root

    left = dfs(root.left, target)
    if left is None:
        return left

    return dfs(root.right, target)

# Template for dfs on a tree
#def dfs(node, state):
#    if node is None:
#        ...
#       return None
#    left = dfs(node.left, state)
#    right = dfs(node.right, state)


# Max depth of a binary tree is the longest root-to-leaf path. Given a binary tree, find its max depth.
# Note: Depth is determined by the number of vertices between nodes
# Time Complexity: O(n)
def tree_max_depth(node) -> int:
    if not node:
        return 0

    left_length = tree_max_depth(node.left) + 1
    right_length = tree_max_depth(node.right) + 1
    return max(left_length, right_length)


# In a binary tree, we define a node "visible" when no node on the root-to-itself path (inclusive) has a greater value.
# The root is always "visible" since there are no other nodes between the root and itself. Given a binary tree,
# count the number of "visible" nodes.
# Time Complexity: O(n)
def visible_tree_node(root):
    def dfs(root, max_sofar):
        if not root:
            return 0

        total = 0
        if root.val >= max_sofar:
            total += 1

        total += dfs(root.left, max(max_sofar, root.val)) 
        total += dfs(root.right, max(max_sofar, root.val))

        return total

    return dfs(root, -float('inf'))
    
    
# A balanced binary tree is defined as a tree such that either it is an empty tree, or
# both its subtree are balanced and has a height difference of at most 1.
# In that case, given a binary tree, determine if it's balanced.
# Return a boolean that returns if the tree is balanced
# Time Complexity: O(n) where n is the number of nodes in the tree
def is_balanced(tree):
    def dfs(tree):
        if tree is None:
            return 0

        left_length = dfs(tree.left)
        right_length = dfs(tree.right)

        if left_length == -1 or right_length == -1:
            return -1

        if abs(left_length - right_length) > 1:
            return -1
        return max(left_length, right_length) + 1

    if dfs(tree) != -1:
        return True


# Given a binary tree, write a serialize function that converts the tree 
# into a string and a deserialize function that converts a string to a binary tree. 
# You may serialize the tree into any string representation you want as long as it 
# can be deseralized.
def serialize(root):
    nodes_list = []
    def dfs(root):
        if not root:
          nodes_list.append('x')
          return
        else:
          nodes_list.append(root)

        dfs(root.left)
        dfs(root.right)
  dfs(root)
  return ''.join(nodes_list)
        
# This approach utilizes an iterator to tokenize the input string
def deserialize(s):
  def dfs(nodes):
    val = next(nodes)
    if not val or val == 'x': return
    cur = Node(int(val))
    cur.left = dfs(nodes)
    cur.right = dfs(nodes)
    return cur
  return dfs(iter(s.split()))


# Lowest common ancestor (LCA) of two nodes v and w in a tree is the lowest 
# (i.e. deepest) node that has both v and w as descendants. We also define 
# each node to be a descendant of itself (so if v has a direct connection 
# from w, w is the lowest common ancestor).
# Given two nodes of a binary tree, find their lowest common ancestor.




# Binary Search Trees
# All elements on the left are less than root, elements on right are greater than 
# Time complexity of a binary search is O(h) where h is the height of the tree

# Binary Search Tree implmentation:
class Node:
  def __init__(self, val, left=None, right=None):
    self.val = val
    self.left = left 
    self.right = right

def find(tree, val):
  if tree is None:  
    return False
  if tree == val:
    return true
  elif tree < val:
    return find(tree.left, val)
  else:
    return find(tree.right, val)

def insert(tree, val):
  if tree is None:
    tree = Node(val)

  if val < tree:
    tree.right = insert(tree.right, val)
  else:
    tree.left = insert(tree.left, val)
  return tree


# A binary search tree is a binary tree with the property that any 
# of its node's value is greater than or equal to any node in its left 
# subtree and less than or equal to any node's value in its right subtree.
# Given a binary tree, determine whether it is a binary search tree.
# Time complexity: O(n) where n is number of nodes

from math import inf

def valid_bst(root):
    def dfs(root, min_val, max_val):
        if root is None:
            return True
        if not(min_val <= root.val <= max_val):
            return False
        
        return dfs(root.left, min_val, root.val) and dfs(root.right, root.val, max_val)
    return dfs(root, -inf, inf)





    
