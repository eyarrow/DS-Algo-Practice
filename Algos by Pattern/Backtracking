# Backtracking Problems

# Combinatorial Search

https://leetcode.com/problems/add-two-numbers/

# Ternary Tree Paths
# Given a ternary tree (each node of the tree has at most three children), find all root-to-leaf paths.
# https://algo.monster/problems/dfs_with_states
def ternary_tree_paths(root):
    def dfs(root, path, res):
        if all(c is None for c in root.children):
            res.append('->'.join(path) + '->' + str(root.val))
            return
        for child in root.children:
            if child is not None:
                path.append(str(root.val))
                dfs(child, path, res)
                path.pop()
    res = []
    if root : dfs(root, [], res)
    return res


# letters on a phone pad
# https://algo.monster/problems/letter_combinations_of_phone_number
# O(2^n) time complexity O(n) space where n is number of digits
KEYBOARD = {
    '2' : 'abc',
    '3' : 'def',
    '4' : 'ghi',
    '5' : 'jkl',
    '6' : 'mno',
    '7' : 'pqrs', 
    '8' : 'tuv',
    '9' : 'wxyz',
}

def letter_combinations_of_phone_number(digits):
    def dfs(path, res):
        if len(path) == len(digits):
            res.append(''.join(path))
            return
        next_number = digits[len(path)]
        
        for letter in KEYBOARD[next_number]:
            path.append(letter)
            dfs(path, res)
            path.pop()          
            
    
    res = []
    dfs([], res)
    return res